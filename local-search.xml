<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Lombok 造成的翻车事故，太坑了！(转载)</title>
    <link href="/2023/06/19/lombok-problem/"/>
    <url>/2023/06/19/lombok-problem/</url>
    
    <content type="html"><![CDATA[<h1 id="Setter-Getter方法的坑"><a href="#Setter-Getter方法的坑" class="headerlink" title="Setter-Getter方法的坑"></a>Setter-Getter方法的坑</h1><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><h3 id="我们在项目当中主要使用Lombok的Setter-Getter方法的注解，也就是组合注解-Data，但是在一次使用Mybatis插入数据的过程当中，出现了一个问题，问题描述如下："><a href="#我们在项目当中主要使用Lombok的Setter-Getter方法的注解，也就是组合注解-Data，但是在一次使用Mybatis插入数据的过程当中，出现了一个问题，问题描述如下：" class="headerlink" title="我们在项目当中主要使用Lombok的Setter-Getter方法的注解，也就是组合注解@Data，但是在一次使用Mybatis插入数据的过程当中，出现了一个问题，问题描述如下："></a>我们在项目当中主要使用Lombok的Setter-Getter方法的注解，也就是组合注解@Data，但是在一次使用Mybatis插入数据的过程当中，出现了一个问题，问题描述如下：</h3><p>我们有个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NMetaVerify</span></span>&#123;<br>    <span class="hljs-keyword">private</span> NMetaType nMetaType;<br>    <span class="hljs-keyword">private</span> Long id;<br>    ....其他属性<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们使用Mybatis插入数据的时候，发现，其他属性都能正常的插入，但是就是nMetaType属性在数据库一直是null。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>当我debug项目代码到调用Mybatis的插入SQL对应的方法的时候，我看到NMetaVerify对象的nMetaType属性还是有数据的，但是执行插入之后，数据库的nMetaType字段就是一直是null，原先我以为是我的枚举类型写法不正确，看了下别的同样具有枚举类型的字段，也是正常能插入到数据库当中的，这更让我感觉到疑惑了。</p><p>于是，我就跟踪Mybatis的源码，发现Mybatis在获取这个nMetaType属性的时候使用了反射，使用的是getxxxx方法来获取的，但是我发现nMetaType的get方法好像有点和Mybatis需要的getxxxx方法长的好像不一样，问题找到了！</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Lombok对于第一个字母小写，第二个字母大写的属性生成的get-set方法和Mybatis以及idea或者说是Java官方认可的get-set方法生成的不一样:</p><p>Lombok生成的Get-Set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NMetaVerify</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> NMetaType nMetaType;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lombokFound</span><span class="hljs-params">()</span></span>&#123;<br>        NMetaVerify nMetaVerify = <span class="hljs-keyword">new</span> NMetaVerify();<br>        nMetaVerify.setNMetaType(NMetaType.TWO); <span class="hljs-comment">//注意：nMetaType的set方法为setNMetaType，第一个n字母大写了，</span><br>        nMetaVerify.getNMetaType();              <span class="hljs-comment">//getxxxx方法也是大写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>idea，Mybatis，Java官方默认的行为为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NMetaVerify</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> NMetaType nMetaType;<br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NMetaType <span class="hljs-title">getnMetaType</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//注意：nMetaType属性的第一个字母小写</span><br>        <span class="hljs-keyword">return</span> nMetaType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setnMetaType</span><span class="hljs-params">(NMetaType nMetaType)</span> </span>&#123;<span class="hljs-comment">//注意：nMetaType属性的第一个字母小写</span><br>        <span class="hljs-keyword">this</span>.nMetaType = nMetaType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreateTime</span><span class="hljs-params">(Date createTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createTime = createTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mybatis-3-4-6版本-解析get-set方法获取属性名字的源码："><a href="#Mybatis-3-4-6版本-解析get-set方法获取属性名字的源码：" class="headerlink" title="Mybatis(3.4.6版本)解析get-set方法获取属性名字的源码："></a>Mybatis(3.4.6版本)解析get-set方法获取属性名字的源码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.ibatis.reflection.property;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.ReflectionException;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertyNamer</span> </span>&#123;<br><br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">PropertyNamer</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-comment">// Prevent Instantiation of Static Class</span><br>       &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">methodToProperty</span><span class="hljs-params">(String name)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">"is"</span>)) &#123;<span class="hljs-comment">//is开头的一般是bool类型，直接从第二个(索引)开始截取(简单粗暴)</span><br>          name = name.substring(<span class="hljs-number">2</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">"get"</span>) || name.startsWith(<span class="hljs-string">"set"</span>)) &#123;<span class="hljs-comment">//set-get的就从第三个(索引)开始截取</span><br>          name = name.substring(<span class="hljs-number">3</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ReflectionException(<span class="hljs-string">"Error parsing property name '"</span> + name + <span class="hljs-string">"'.  Didn't start with 'is', 'get' or 'set'."</span>);<br>      &#125;<br>            <span class="hljs-comment">//下面这个判断很重要，可以分成两句话开始解释，解释如下</span><br>            <span class="hljs-comment">//第一句话：name.length()==1</span><br>            <span class="hljs-comment">//       对于属性只有一个字母的，例如private int x;</span><br>            <span class="hljs-comment">//          对应的get-set方法是getX();setX(int x);</span><br>            <span class="hljs-comment">//第二句话：name.length() &gt; 1 &amp;&amp; !Character.isUpperCase(name.charAt(1)))</span><br>            <span class="hljs-comment">//      属性名字长度大于1，并且第二个(代码中的charAt(1)，这个1是数组下标)字母是小写的</span><br>            <span class="hljs-comment">//      如果第二个char是大写的，那就直接返回name</span><br>      <span class="hljs-keyword">if</span> (name.length() == <span class="hljs-number">1</span> || (name.length() &gt; <span class="hljs-number">1</span> &amp;&amp; !Character.isUpperCase(name.charAt(<span class="hljs-number">1</span>)))) &#123;<br>          name = name.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toLowerCase(Locale.ENGLISH) + name.substring(<span class="hljs-number">1</span>);<span class="hljs-comment">//让属性名第一个字母小写，然后加上后面的内容</span><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isProperty</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">"get"</span>) || name.startsWith(<span class="hljs-string">"set"</span>) || name.startsWith(<span class="hljs-string">"is"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isGetter</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">"get"</span>) || name.startsWith(<span class="hljs-string">"is"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSetter</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">"set"</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mybatis解析get-set方法为属性名字测试"><a href="#Mybatis解析get-set方法为属性名字测试" class="headerlink" title="Mybatis解析get-set方法为属性名字测试"></a>Mybatis解析get-set方法为属性名字测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foundPropertyNamer</span><span class="hljs-params">()</span> </span>&#123;<br>    String isName = <span class="hljs-string">"isName"</span>;<br>    String getName = <span class="hljs-string">"getName"</span>;<br>    String getnMetaType = <span class="hljs-string">"getnMetaType"</span>;<br>    String getNMetaType = <span class="hljs-string">"getNMetaType"</span>;<br><br>    Stream.of(isName,getName,getnMetaType,getNMetaType)<br>            .forEach(methodName-&gt;System.out.println(<span class="hljs-string">"方法名字是:"</span>+methodName+<span class="hljs-string">" 属性名字:"</span>+ PropertyNamer.methodToProperty(methodName)));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">方法名字是:isName 属性名字:name <br>   方法名字是:getName 属性名字:name <br>   方法名字是:getnMetaType 属性名字:nMetaType <span class="hljs-comment">//这个以及下面的属性第二个字母都是大写，所以直接返回name</span><br>   方法名字是:getNMetaType 属性名字:NMetaType<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>修改属性名字，让第二个字母小写，或者说是规定所有的属性的前两个字母必须小写<br>如果数据库已经设计好，并且前后端接口对接好了，不想修改，那就专门为这种特殊的属性使用idea生成get-set方法复制代码</p><h1 id="Accessor-chain-true-注解的问题"><a href="#Accessor-chain-true-注解的问题" class="headerlink" title="@Accessor(chain = true)注解的问题"></a>@Accessor(chain = true)注解的问题</h1><h2 id="问题发现-1"><a href="#问题发现-1" class="headerlink" title="问题发现"></a>问题发现</h2><p>在使用 easyexcel 导出的时候，发现以前的实体类导出都很正常，但是现在新加的实体类不正常了，比对了发现，新加的实体类增加了@Accessor(chain = true)注解，我们的目的主要是方便我们链式调用set方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> UserDto()<br>.setUserName(<span class="hljs-string">""</span>)<br>.setAge(<span class="hljs-number">10</span>)<br>........<br>.setBirthday(<span class="hljs-keyword">new</span> Date());<br></code></pre></td></tr></table></figure><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>easyexcel底层使用的是cglib来做反射工具包的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">com.alibaba.excel.read.listener.ModelBuildEventListener 类的第<span class="hljs-number">130</span>行<br>BeanMap.create(resultModel).putAll(map);<br><br>最底层的是cglib的BeanMap的这个方法调用<br><br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> Object <span class="hljs-title">put</span><span class="hljs-params">(Object bean, Object key, Object value)</span></span>;com.alibaba.excel.read.listener.ModelBuildEventListener 类的第<span class="hljs-number">130</span>行<br>BeanMap.create(resultModel).putAll(map);<br><br>最底层的是cglib的BeanMap的这个方法调用<br><br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> Object <span class="hljs-title">put</span><span class="hljs-params">(Object bean, Object key, Object value)</span></span>;<br></code></pre></td></tr></table></figure><p>但是cglib使用的是Java的rt.jar里面的一个Introspector这个类的方法：</p><p>Introspector.java 第520行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">int</span>.class.equals(argTypes[<span class="hljs-number">0</span>]) &amp;&amp; name.startsWith(GET_PREFIX)) &#123;<br>   pd = <span class="hljs-keyword">new</span> IndexedPropertyDescriptor(<span class="hljs-keyword">this</span>.beanClass, name.substring(<span class="hljs-number">3</span>), <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, method, <span class="hljs-keyword">null</span>);<br>   <span class="hljs-comment">//下面这行判断，只获取返回值是void类型的setxxxx方法</span><br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">void</span>.class.equals(resultType) &amp;&amp; name.startsWith(SET_PREFIX)) &#123;<br>    <span class="hljs-comment">// Simple setter</span><br>    pd = <span class="hljs-keyword">new</span> PropertyDescriptor(<span class="hljs-keyword">this</span>.beanClass, name.substring(<span class="hljs-number">3</span>), <span class="hljs-keyword">null</span>, method);<br>    <span class="hljs-keyword">if</span> (throwsException(method, PropertyVetoException.class)) &#123;<br>       pd.setConstrained(<span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>去掉Accessor注解。</p><p>要么就等待easyexcel的作者替换掉底层的cglib或者是其他，反正是支持获取返回值不是void的setxxx方法就行复制代码。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制和十进制转换</title>
    <link href="/2022/08/31/binary-decimal/"/>
    <url>/2022/08/31/binary-decimal/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制转十进制。"><a href="#二进制转十进制。" class="headerlink" title="二进制转十进制。"></a>二进制转十进制。</h1><h4 id="方法一：二进制转为十进制要从右到左用二进制的每个数去乘以2的相应次方（次方从0开始），再将其每个数进行相加。"><a href="#方法一：二进制转为十进制要从右到左用二进制的每个数去乘以2的相应次方（次方从0开始），再将其每个数进行相加。" class="headerlink" title="方法一：二进制转为十进制要从右到左用二进制的每个数去乘以2的相应次方（次方从0开始），再将其每个数进行相加。"></a>方法一：二进制转为十进制要从右到左用二进制的每个数去乘以2的相应次方（次方从0开始），再将其每个数进行相加。</h4><p>例如：(1101)2转十进制：</p><p><img src="/2022/08/31/binary-decimal/2-10_1.jpg" srcset="/img/loading.gif" lazyload alt="avatar"></p><h4 id="方法二：先把2的次方依次排列出来，再将二进制数倒序依次排列，最后再把对应1的相加起来，0不加，具体如图："><a href="#方法二：先把2的次方依次排列出来，再将二进制数倒序依次排列，最后再把对应1的相加起来，0不加，具体如图：" class="headerlink" title="方法二：先把2的次方依次排列出来，再将二进制数倒序依次排列，最后再把对应1的相加起来，0不加，具体如图："></a>方法二：先把2的次方依次排列出来，再将二进制数倒序依次排列，最后再把对应1的相加起来，0不加，具体如图：</h4><p><img src="/2022/08/31/binary-decimal/2-10_2.jpg" srcset="/img/loading.gif" lazyload alt="avatar"></p><p>即1+4+8=13。</p><h1 id="十进制转二进制。"><a href="#十进制转二进制。" class="headerlink" title="十进制转二进制。"></a>十进制转二进制。</h1><h4 id="方法一：采用”除2取余，逆序排列”。用十进制整数除2，可以得到一个商和余数；再用商去除2，又会得到一个商和余数，"><a href="#方法一：采用”除2取余，逆序排列”。用十进制整数除2，可以得到一个商和余数；再用商去除2，又会得到一个商和余数，" class="headerlink" title="方法一：采用”除2取余，逆序排列”。用十进制整数除2，可以得到一个商和余数；再用商去除2，又会得到一个商和余数，"></a>方法一：采用”除2取余，逆序排列”。用十进制整数除2，可以得到一个商和余数；再用商去除2，又会得到一个商和余数，</h4><p>如此进行，直到商为零时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次逆序排列起来组合成二进制数。<br>例：把(17)10转换为二进制数。</p><p><img src="/2022/08/31/binary-decimal/10-2_1.jpg" srcset="/img/loading.gif" lazyload alt="avatar"></p><p>即(17)10=(10001)2</p><h4 id="方法二：十转二则与二转十相反，十转二采用与相位相减的方法-也是先把2的次方依次排列出来，"><a href="#方法二：十转二则与二转十相反，十转二采用与相位相减的方法-也是先把2的次方依次排列出来，" class="headerlink" title="方法二：十转二则与二转十相反，十转二采用与相位相减的方法,也是先把2的次方依次排列出来，"></a>方法二：十转二则与二转十相反，十转二采用与相位相减的方法,也是先把2的次方依次排列出来，</h4><p>然后用十进制数与其作对比，比其大或是相等就在相位下写入1，再与其相减，相减后的数再依次与前面作对比，<br>如此进行，比其小就写入0，直至计算到2的0次方。最后从左往右排列出二进制数。<br>例：17转二进制如图。</p><p><img src="/2022/08/31/binary-decimal/10-2_2.jpg" srcset="/img/loading.gif" lazyload alt="avatar"></p><p>即从左往右排列得出二进制数10001。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis日志参数自动填充</title>
    <link href="/2022/08/11/mybatis-format/"/>
    <url>/2022/08/11/mybatis-format/</url>
    
    <content type="html"><![CDATA[<p><a href="/html/mybatis_format.html">mybatis日志参数自动填充</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARTS-4</title>
    <link href="/2019/10/21/ARTS-4/"/>
    <url>/2019/10/21/ARTS-4/</url>
    
    <content type="html"><![CDATA[<h2 id="ARTS"><a href="#ARTS" class="headerlink" title="ARTS"></a>ARTS</h2><h5 id="Algorithm-每周至少做一道LeetCode算法题"><a href="#Algorithm-每周至少做一道LeetCode算法题" class="headerlink" title="Algorithm: 每周至少做一道LeetCode算法题"></a>Algorithm: 每周至少做一道LeetCode算法题</h5><h5 id="Review-阅读并点评至少一篇英文技术文章"><a href="#Review-阅读并点评至少一篇英文技术文章" class="headerlink" title="Review: 阅读并点评至少一篇英文技术文章"></a>Review: 阅读并点评至少一篇英文技术文章</h5><h5 id="Tip-学习至少一个技术技巧"><a href="#Tip-学习至少一个技术技巧" class="headerlink" title="Tip: 学习至少一个技术技巧"></a>Tip: 学习至少一个技术技巧</h5><h5 id="Share-分享一篇有观点和思考的技术文章"><a href="#Share-分享一篇有观点和思考的技术文章" class="headerlink" title="Share: 分享一篇有观点和思考的技术文章"></a>Share: 分享一篇有观点和思考的技术文章</h5><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>完全平方数<br>给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。</p><p>示例 1:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入: n = 12<br>输出:<span class="hljs-number"> 3 </span><br>解释:<span class="hljs-number"> 12 </span>=<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+ 4.<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-section">输入: n = 13</span><br><span class="hljs-section">输出: 2</span><br><span class="hljs-section">解释: 13 = 4 + 9.</span><br></code></pre></td></tr></table></figure><h4 id="使用队列和广度优先搜索-BFS"><a href="#使用队列和广度优先搜索-BFS" class="headerlink" title="使用队列和广度优先搜索(BFS)"></a>使用队列和广度优先搜索(BFS)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumSquares</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br><span class="hljs-keyword">int</span> val;<br><span class="hljs-keyword">int</span> step;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val, <span class="hljs-keyword">int</span> step)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.val = val;<br><span class="hljs-keyword">this</span>.step = step;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>Queue&lt;Node&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>queue.add(<span class="hljs-keyword">new</span> Node(n, <span class="hljs-number">1</span>));<br><span class="hljs-keyword">boolean</span> record[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br><span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br><span class="hljs-keyword">int</span> val = queue.peek().val;<br><span class="hljs-keyword">int</span> step = queue.peek().step;<br>queue.remove();<br><span class="hljs-comment">// 每一层的广度遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; ; i++) &#123;<br><span class="hljs-keyword">int</span> nextVal = val - i * i;<br><span class="hljs-comment">// 说明已到最大平方数</span><br><span class="hljs-keyword">if</span> (nextVal &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">// 由于是广度遍历，所以当遍历到0时，肯定是最短路径</span><br><span class="hljs-keyword">if</span> (nextVal == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> step;<br><br><span class="hljs-comment">// 当再次出现时没有必要加入，因为在该节点的路径长度肯定不小于第一次出现的路径长</span><br><span class="hljs-keyword">if</span> (!record[nextVal]) &#123;<br>queue.add(<span class="hljs-keyword">new</span> Node(nextVal, step + <span class="hljs-number">1</span>));<br>record[nextVal] = <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p><a href="http://coding-geek.com/how-does-a-hashmap-work-in-java/" target="_blank" rel="noopener">How does a HashMap work in JAVA</a></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>&nbsp;&nbsp;有点难懂，还需要多次阅读。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>java程序启动参数-D是用来做什么的</p><p>去查询了一下官方解释：</p><p>Set a system property value. If value is a string that contains spaces, you must enclose the string in double quotes:</p><p>java -Dfoo=”some string” SomeClass<br>也就是说-D是用来在启动一个java程序时设置系统属性值的。如果该值是一个字符串且包含空格，那么需要包在一对双引号中。</p><p>何为系统属性值呢？也就是在System类中通过getProperties()得到的一串系统属性。</p><p>如果是在tomcat里使用，则需要在bin/catalina.sh 里加入一条 JAVA_OPTS= “-Dfoo=some thing”</p><h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p><a href="https://mp.weixin.qq.com/s/Kp9cuxpn7T3f8hAGUF0cKQ" target="_blank" rel="noopener">开源的13个Spring Boot 优秀学习项目！超53K星，一网打尽！</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARTS-3</title>
    <link href="/2019/10/08/ARTS-3/"/>
    <url>/2019/10/08/ARTS-3/</url>
    
    <content type="html"><![CDATA[<h2 id="ARTS"><a href="#ARTS" class="headerlink" title="ARTS"></a>ARTS</h2><h5 id="Algorithm-每周至少做一道LeetCode算法题"><a href="#Algorithm-每周至少做一道LeetCode算法题" class="headerlink" title="Algorithm: 每周至少做一道LeetCode算法题"></a>Algorithm: 每周至少做一道LeetCode算法题</h5><h5 id="Review-阅读并点评至少一篇英文技术文章"><a href="#Review-阅读并点评至少一篇英文技术文章" class="headerlink" title="Review: 阅读并点评至少一篇英文技术文章"></a>Review: 阅读并点评至少一篇英文技术文章</h5><h5 id="Tip-学习至少一个技术技巧"><a href="#Tip-学习至少一个技术技巧" class="headerlink" title="Tip: 学习至少一个技术技巧"></a>Tip: 学习至少一个技术技巧</h5><h5 id="Share-分享一篇有观点和思考的技术文章"><a href="#Share-分享一篇有观点和思考的技术文章" class="headerlink" title="Share: 分享一篇有观点和思考的技术文章"></a>Share: 分享一篇有观点和思考的技术文章</h5><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>打开转盘锁–你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’ 。每个拨轮可以自由旋转：例如把 ‘9’ 变为  ‘0’，’0’ 变为 ‘9’ 。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为 ‘0000’ ，一个代表四个拨轮的数字的字符串。</p><p>列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。</p><p>示例 1:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入：deadends = [<span class="hljs-string">"0201"</span>,<span class="hljs-string">"0101"</span>,<span class="hljs-string">"0102"</span>,<span class="hljs-string">"1212"</span>,<span class="hljs-string">"2002"</span>], target = <span class="hljs-string">"0202"</span><br>输出：<span class="hljs-number">6</span><br>解释：<br>可能的移动序列为 <span class="hljs-string">"0000"</span> -&gt; <span class="hljs-string">"1000"</span> -&gt; <span class="hljs-string">"1100"</span> -&gt; <span class="hljs-string">"1200"</span> -&gt; <span class="hljs-string">"1201"</span> -&gt; <span class="hljs-string">"1202"</span> -&gt; <span class="hljs-string">"0202"</span>。<br>注意 <span class="hljs-string">"0000"</span> -&gt; <span class="hljs-string">"0001"</span> -&gt; <span class="hljs-string">"0002"</span> -&gt; <span class="hljs-string">"0102"</span> -&gt; <span class="hljs-string">"0202"</span> 这样的序列是不能解锁的，<br>因为当拨动到 <span class="hljs-string">"0102"</span> 时这个锁就会被锁定。<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入: <span class="hljs-attr">deadends</span> = [<span class="hljs-string">"8888"</span>], <span class="hljs-attr">target</span> = <span class="hljs-string">"0009"</span><br>输出：<span class="hljs-number">1</span><br>解释：<br>把最后一位反向旋转一次即可 <span class="hljs-string">"0000"</span> -&gt; <span class="hljs-string">"0009"</span>。<br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入: <span class="hljs-attr">deadends</span> = [<span class="hljs-string">"8887"</span>,<span class="hljs-string">"8889"</span>,<span class="hljs-string">"8878"</span>,<span class="hljs-string">"8898"</span>,<span class="hljs-string">"8788"</span>,<span class="hljs-string">"8988"</span>,<span class="hljs-string">"7888"</span>,<span class="hljs-string">"9888"</span>], <span class="hljs-attr">target</span> = <span class="hljs-string">"8888"</span><br>输出：-<span class="hljs-number">1</span><br>解释：<br>无法旋转到目标数字且不被锁定。<br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入: <span class="hljs-attr">deadends</span> = [<span class="hljs-string">"0000"</span>], <span class="hljs-attr">target</span> = <span class="hljs-string">"8888"</span><br>输出：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>提示：</p><p>死亡列表 deadends 的长度范围为 [1, 500]。<br>目标数字 target 不会在 deadends 之中。<br>每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 ‘0000’ 到 ‘9999’ 中产生。</p><h4 id="使用队列和广度优先搜索-BFS"><a href="#使用队列和广度优先搜索-BFS" class="headerlink" title="使用队列和广度优先搜索(BFS)"></a>使用队列和广度优先搜索(BFS)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">openLock</span><span class="hljs-params">(String[] deadends, String target)</span> </span>&#123;<br><br><span class="hljs-keyword">char</span>[] pos = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[] &#123; <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span> &#125;;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>Set&lt;String&gt; deadendList = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>deadendList.addAll(Arrays.asList(deadends));<br><br>Queue&lt;String&gt; locks = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>String start = <span class="hljs-string">"0000"</span>;<br><br>locks.add(start);<br><br><span class="hljs-keyword">while</span> (!locks.isEmpty()) &#123;<br><br><span class="hljs-keyword">int</span> size = locks.size();<br><span class="hljs-keyword">while</span> (size-- &gt; <span class="hljs-number">0</span>) &#123;<br><br>String cur = locks.remove();<br><span class="hljs-keyword">if</span> (cur.equals(target)) &#123;<br><span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!deadendList.contains(cur)) &#123;<br>deadendList.add(cur);<br><br><span class="hljs-comment">// 四个数字每一个都向上或向下找一位</span><br><span class="hljs-keyword">char</span>[] curchar = cur.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; curchar.length; i++) &#123;<br><br><span class="hljs-keyword">int</span> position = curchar[i] - <span class="hljs-string">'0'</span>;<br><br><span class="hljs-keyword">char</span>[] tmp = curchar.clone();<br><br>tmp[i] = pos[(position + <span class="hljs-number">11</span>) % <span class="hljs-number">10</span>];<br>locks.add(String.valueOf(tmp));<br><br>tmp[i] = pos[(position + <span class="hljs-number">9</span>) % <span class="hljs-number">10</span>];<br>locks.add(String.valueOf(tmp));<br>&#125;<br>&#125;<br>&#125;<br><br>cnt++;<br>&#125;<br><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p><a href="https://developer.ibm.com/articles/j-java8idioms1/" target="_blank" rel="noopener">An easier path to functional programming in Java</a></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>&nbsp;&nbsp;声明式将极大地简化向Java函数编程的过渡。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>plugins 和 pluginManagement 的区别，和我们前面研究过的 dependencies 和 dependencyManagement 的区别是非常类似的。plugins 下的 plugin 是真实使用的，而<red> pluginManagement 下的 plugins 下的 plugin 则仅仅是一种声明，子项目中可以对 pluginManagement 下的 plugin 进行信息的选择、继承、覆盖等</red>。</p><p>pluginManagement使用实战<br>假如存在两个项目，项目A为项目B的父项目，其关系通过pom文件的关系确定。项目A的父pom文件片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">attach</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">attach</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果项目B也想使用该plugin配置，则在项目B的子pom文件中只需要如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以看到，子pom文件中，省去了版本、配置细节等信息，只需要指定groupId和artifactId，其他信息均从父pom文件继承。当然，如果子pom文件想定制自己的特定内容，可以另行设置，并会覆盖从父pom文件继承到的内容。</p><p>需要注意的是，dependencies 和 dependencyManagement 均是 project 下的直接子元素，但是 plugins 和 pluginManagement 却是 project 下 build 的直接子元素。</p><h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p><a href="https://mp.weixin.qq.com/s/6IJGCvuAz7PradvtKRVB8g" target="_blank" rel="noopener">Spring 中的统一异常处理 – Frapples from 芋道源码</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARTS-2</title>
    <link href="/2019/09/24/ARTS-2/"/>
    <url>/2019/09/24/ARTS-2/</url>
    
    <content type="html"><![CDATA[<h2 id="ARTS"><a href="#ARTS" class="headerlink" title="ARTS"></a>ARTS</h2><h5 id="Algorithm-每周至少做一道LeetCode算法题"><a href="#Algorithm-每周至少做一道LeetCode算法题" class="headerlink" title="Algorithm: 每周至少做一道LeetCode算法题"></a>Algorithm: 每周至少做一道LeetCode算法题</h5><h5 id="Review-阅读并点评至少一篇英文技术文章"><a href="#Review-阅读并点评至少一篇英文技术文章" class="headerlink" title="Review: 阅读并点评至少一篇英文技术文章"></a>Review: 阅读并点评至少一篇英文技术文章</h5><h5 id="Tip-学习至少一个技术技巧"><a href="#Tip-学习至少一个技术技巧" class="headerlink" title="Tip: 学习至少一个技术技巧"></a>Tip: 学习至少一个技术技巧</h5><h5 id="Share-分享一篇有观点和思考的技术文章"><a href="#Share-分享一篇有观点和思考的技术文章" class="headerlink" title="Share: 分享一篇有观点和思考的技术文章"></a>Share: 分享一篇有观点和思考的技术文章</h5><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>岛屿数量–给定一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p><p> 示例 1:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-section">输入:</span><br>11110<br>11010<br>11000<br>00000<br><br><span class="hljs-section">输出: 1</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-section">输入:</span><br>11000<br>11000<br>00100<br>00011<br><br><span class="hljs-section">输出: 3</span><br></code></pre></td></tr></table></figure><h4 id="使用队列和广度优先搜索-BFS"><a href="#使用队列和广度优先搜索-BFS" class="headerlink" title="使用队列和广度优先搜索(BFS)"></a>使用队列和广度优先搜索(BFS)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">T1</span>, <span class="hljs-title">T2</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> T1 fst;<br><br><span class="hljs-keyword">private</span> T2 snd;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pair</span><span class="hljs-params">(T1 fst, T2 snd)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.fst = fst;<br><span class="hljs-keyword">this</span>.snd = snd;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T1, T2&gt; <span class="hljs-function">Pair&lt;T1, T2&gt; <span class="hljs-title">of</span><span class="hljs-params">(T1 fst, T2 snd)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pair&lt;&gt;(fst, snd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T1 <span class="hljs-title">getFst</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> fst;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFst</span><span class="hljs-params">(T1 fst)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.fst = fst;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T2 <span class="hljs-title">getSnd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> snd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSnd</span><span class="hljs-params">(T2 snd)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.snd = snd;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> islandCnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[i].length; j++) &#123;<br><span class="hljs-keyword">char</span> cur = grid[i][j];<br><br><span class="hljs-keyword">if</span> (cur == <span class="hljs-string">'0'</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br>Queue&lt;String&gt; islands = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>Queue&lt;Pair&lt;Integer, Integer&gt;&gt; positions = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>islands.add(String.valueOf(cur));<br>positions.add(<span class="hljs-keyword">new</span> Pair&lt;Integer, Integer&gt;(i, j));<br>grid[i][j] = <span class="hljs-string">'0'</span>;<br><br>islandCnt++;<br><br><span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (!islands.isEmpty()) &#123;<br><br>islands.remove();<br>Pair&lt;Integer, Integer&gt; position = positions.remove();<br>row = position.getFst();<br>col = position.getSnd();<br><br><span class="hljs-comment">// 上</span><br><span class="hljs-keyword">if</span> (row - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row - <span class="hljs-number">1</span>][col] != <span class="hljs-string">'0'</span>) &#123;<br>islands.add(String.valueOf(grid[row - <span class="hljs-number">1</span>][col]));<br>positions.add(<span class="hljs-keyword">new</span> Pair&lt;Integer, Integer&gt;(row - <span class="hljs-number">1</span>, col));<br><br>grid[row - <span class="hljs-number">1</span>][col] = <span class="hljs-string">'0'</span>;<br>&#125;<br><br><span class="hljs-comment">// 左</span><br><span class="hljs-keyword">if</span> (col - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row][col - <span class="hljs-number">1</span>] != <span class="hljs-string">'0'</span>) &#123;<br>islands.add(String.valueOf(grid[row][col - <span class="hljs-number">1</span>]));<br>positions.add(<span class="hljs-keyword">new</span> Pair&lt;Integer, Integer&gt;(row, col - <span class="hljs-number">1</span>));<br><br>grid[row][col - <span class="hljs-number">1</span>] = <span class="hljs-string">'0'</span>;<br>&#125;<br><br><span class="hljs-comment">// 下</span><br><span class="hljs-keyword">if</span> (row + <span class="hljs-number">2</span> &lt;= grid.length &amp;&amp; grid[row + <span class="hljs-number">1</span>][col] != <span class="hljs-string">'0'</span>) &#123;<br>islands.add(String.valueOf(grid[row + <span class="hljs-number">1</span>][col]));<br>positions.add(<span class="hljs-keyword">new</span> Pair&lt;Integer, Integer&gt;(row + <span class="hljs-number">1</span>, col));<br><br>grid[row + <span class="hljs-number">1</span>][col] = <span class="hljs-string">'0'</span>;<br>&#125;<br><br><span class="hljs-comment">// 右</span><br><span class="hljs-keyword">if</span> (col + <span class="hljs-number">2</span> &lt;= grid[<span class="hljs-number">0</span>].length &amp;&amp; grid[row][col + <span class="hljs-number">1</span>] != <span class="hljs-string">'0'</span>) &#123;<br>islands.add(String.valueOf(grid[row][col + <span class="hljs-number">1</span>]));<br>positions.add(<span class="hljs-keyword">new</span> Pair&lt;Integer, Integer&gt;(row, col + <span class="hljs-number">1</span>));<br><br>grid[row][col + <span class="hljs-number">1</span>] = <span class="hljs-string">'0'</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> islandCnt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p><a href="https://developer.ibm.com/articles/j-java8idioms6/" target="_blank" rel="noopener">Why the perfect lambda expression is just one line</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&nbsp;&nbsp;简短的lambda表达式支持代码的可读性，这是使用函数式编程的主要好处之一。<br>&nbsp;&nbsp;避免使用多行lambda表达式。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;JavaScript 在两数运算时会出现精度问题。<br>我司的品牌商后台在提现的时候前端需要将提现金额乘以10000传给后台，但是偶尔会出现比如品牌商提现5378.44 * 10000 = 53784399.99999999。<br>这种数据提交给第三方支付那边会被截取成5378.43，这样我们就多替品牌商出了1分钱，久而久之也挺多的（滑稽)。<br>所以需要前端使用金钱类库来避免这种精度丢失，后台也对值进行100取余，有余数就不入库，这样就避免这种问题。</p><h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><p><a href="https://mp.weixin.qq.com/s/sxXVzB_t1qMAwqBCsGrVNg" target="_blank" rel="noopener">那些年，我们见过的Java服务端“问题” – 高德技术</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ARTS-1</title>
    <link href="/2019/09/17/ARTS-1/"/>
    <url>/2019/09/17/ARTS-1/</url>
    
    <content type="html"><![CDATA[<h2 id="ARTS"><a href="#ARTS" class="headerlink" title="ARTS"></a>ARTS</h2><h5 id="Algorithm-每周至少做一道LeetCode算法题"><a href="#Algorithm-每周至少做一道LeetCode算法题" class="headerlink" title="Algorithm: 每周至少做一道LeetCode算法题"></a>Algorithm: 每周至少做一道LeetCode算法题</h5><h5 id="Review-阅读并点评至少一篇英文技术文章"><a href="#Review-阅读并点评至少一篇英文技术文章" class="headerlink" title="Review: 阅读并点评至少一篇英文技术文章"></a>Review: 阅读并点评至少一篇英文技术文章</h5><h5 id="Tip-学习至少一个技术技巧"><a href="#Tip-学习至少一个技术技巧" class="headerlink" title="Tip: 学习至少一个技术技巧"></a>Tip: 学习至少一个技术技巧</h5><h5 id="Share-分享一篇有观点和思考的技术文章"><a href="#Share-分享一篇有观点和思考的技术文章" class="headerlink" title="Share: 分享一篇有观点和思考的技术文章"></a>Share: 分享一篇有观点和思考的技术文章</h5><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>给定一个二叉树，返回它的前序遍历。</p><p> 示例:</p><p>输入: [1,null,2,3]  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">1</span><br> \<br>  <span class="hljs-number">2</span><br> /<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出: [1,2,3]</p><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>TreeNode tmp = root;<br>Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br><span class="hljs-keyword">while</span> (tmp != <span class="hljs-keyword">null</span>) &#123;<br>result.add(tmp.val);<br><br><span class="hljs-keyword">if</span> (tmp.right != <span class="hljs-keyword">null</span>) &#123;<br>stack.push(tmp.right);<br>&#125;<br><br><span class="hljs-keyword">if</span> (tmp.left != <span class="hljs-keyword">null</span>) &#123;<br>tmp = tmp.left;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (stack.isEmpty()) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tmp = stack.pop();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>       List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       loop(root, result);<br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br><br>       result.add(root.val);<br><br>       loop(root.left, result);<br>       loop(root.right, result);<br>   &#125;<br></code></pre></td></tr></table></figure><p>给定一个二叉树，返回它的中序遍历。</p><p>示例:</p><p>输入: [1,null,2,3]</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">1</span><br> \<br>  <span class="hljs-number">2</span><br> /<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出: [1,3,2]</p><h4 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>TreeNode tmp = root;<br><br><span class="hljs-keyword">while</span> (tmp != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br><br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-keyword">null</span>) &#123;<br>stack.push(tmp);<br>tmp = tmp.left;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tmp = stack.pop();<br>result.add(tmp.val);<br>tmp = tmp.right;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>给定一个二叉树，返回它的后序遍历。</p><p>示例:</p><p>输入: [1,null,2,3]  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">1</span><br> \<br>  <span class="hljs-number">2</span><br> /<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出: [3,2,1]</p><h4 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode value)</span> </span>&#123;<br><br>List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>TreeNode tmp = value, root = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span> (tmp != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-keyword">null</span>) &#123;<br>stack.push(tmp);<br>tmp = tmp.left;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tmp = stack.peek();<br><span class="hljs-keyword">if</span> (tmp.right == <span class="hljs-keyword">null</span> || tmp.right == root) &#123;<br>result.add(tmp.val);<br>root = tmp;<br>stack.pop();<br>tmp = <span class="hljs-keyword">null</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tmp = tmp.right;<br>&#125;<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><h4 id="Effective-Java-3rd-Edition-Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"><a href="#Effective-Java-3rd-Edition-Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters" class="headerlink" title="Effective Java 3rd Edition Chapter 2 Item 2: Consider a builder when faced with many constructor parameters"></a>Effective Java 3rd Edition Chapter 2 Item 2: Consider a builder when faced with many constructor parameters</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Static factories and constructors share a limitation: they do not scale well to large<br>numbers of optional parameters. Consider the case of a class representing the<br>Nutrition Facts label that appears on packaged foods. These labels have a few<br>required fields—serving size, servings per container, and calories per serving—<br>and more than twenty optional fields—total fat, saturated fat, trans fat,<br>cholesterol, sodium, and so on. Most products have nonzero values for only a<br>few of these optional fields.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;What sort of constructors or static factories should you write for such a class?<br>Traditionally, programmers have used the telescoping constructor pattern, in<br>which you provide a constructor with only the required parameters, another with<br>a single optional parameter, a third with two optional parameters, and so on,<br>culminating in a constructor with all the optional parameters. Here’s how it looks<br>in practice. For brevity’s sake, only four optional fields are shown:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Telescoping constructor pattern - does not scale well!</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NutritionFacts</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servingSize; <span class="hljs-comment">// (mL) required</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servings; <span class="hljs-comment">// (per container) requiredprivate final int calories; // (per serving) optional</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> fat; <span class="hljs-comment">// (g/serving) optional</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sodium; <span class="hljs-comment">// (mg/serving) optional</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> carbohydrate; <span class="hljs-comment">// (g/serving) optional</span><br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings)</span> </span>&#123;<br>  <span class="hljs-keyword">this</span>(servingSize, servings, <span class="hljs-number">0</span>);<br>  &#125; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings, <span class="hljs-keyword">int</span> calories)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>(servingSize, servings, calories, <span class="hljs-number">0</span>);<br>  &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings, <span class="hljs-keyword">int</span> calories, <span class="hljs-keyword">int</span> fat)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>(servingSize, servings, calories, fat, <span class="hljs-number">0</span>);<br>  &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings, <span class="hljs-keyword">int</span> calories, <span class="hljs-keyword">int</span> fat, <span class="hljs-keyword">int</span> sodium)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="hljs-number">0</span>);<br>  &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings, <span class="hljs-keyword">int</span> calories, <span class="hljs-keyword">int</span> fat, <span class="hljs-keyword">int</span> sodium, <span class="hljs-keyword">int</span> carbohydrate)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.servingSize = servingSize;<br>    <span class="hljs-keyword">this</span>.servings = servings;<br>    <span class="hljs-keyword">this</span>.calories = calories;<br>    <span class="hljs-keyword">this</span>.fat = fat;<br>    <span class="hljs-keyword">this</span>.sodium = sodium;<br>    <span class="hljs-keyword">this</span>.carbohydrate = carbohydrate;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;When you want to create an instance, you use the constructor with the shortest<br>parameter list containing all the parameters you want to set:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">NutritionFacts cocaCola =<br>new NutritionFacts(<span class="hljs-number">240</span>, <span class="hljs-number">8</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">35</span>, <span class="hljs-number">27</span>);<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Typically this constructor invocation will require many parameters that you<br>don’t want to set, but you’re forced to pass a value for them anyway. In this case,<br>we passed a value of 0 for fat. With “only” six parameters this may not seem<br>so bad, but it quickly gets out of hand as the number of parameters increases.<br>In short, <b>the telescoping constructor pattern works, but it is hard to write<br>client code when there are many parameters, and harder still to read it.</b> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;The reader is left wondering what all those values mean and must carefully countparameters to find out.<br>Long sequences of identically typed parameters can cause<br>subtle bugs. If the client accidentally reverses two such parameters, the compiler<br>won’t complain, but the program will misbehave at runtime (Item 51).<br>A second alternative when you’re faced with many optional parameters in a<br>constructor is the JavaBeans pattern, in which you call a parameterless<br>constructor to create the object and then call setter methods to set each required<br>parameter and each optional parameter of interest:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// JavaBeans Pattern - allows inconsistency, mandates mutability</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NutritionFacts</span> </span>&#123;<br>  <span class="hljs-comment">// Parameters initialized to default values (if any)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> servingSize = -<span class="hljs-number">1</span>; <span class="hljs-comment">// Required; no default value</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> servings = -<span class="hljs-number">1</span>; <span class="hljs-comment">// Required; no default value</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> calories = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> fat = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sodium = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> carbohydrate = <span class="hljs-number">0</span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>  <span class="hljs-comment">// Setters</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setServingSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; servingSize = val; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setServings</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; servings = val; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCalories</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; calories = val; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; fat = val; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSodium</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; sodium = val; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCarbohydrate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123; carbohydrate = val; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;This pattern has none of the disadvantages of the telescoping constructor pattern.<br>It is easy, if a bit wordy, to create instances, and easy to read the resulting code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">NutritionFacts cocaCola = <span class="hljs-keyword">new</span> NutritionFacts();<br>cocaCola.setServingSize(<span class="hljs-number">240</span>);<br>cocaCola.setServings(<span class="hljs-number">8</span>);<br>cocaCola.setCalories(<span class="hljs-number">100</span>);<br>cocaCola.setSodium(<span class="hljs-number">35</span>);<br>cocaCola.setCarbohydrate(<span class="hljs-number">27</span>);<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Unfortunately, the JavaBeans pattern has serious disadvantages of its own.<br>Because construction is split across multiple calls, a JavaBean may be in an<br>inconsistent state partway through its construction. The class does not have<br>the option of enforcing consistency merely by checking the validity of the<br>constructor parameters. Attempting to use an object when it’s in an inconsistent<br>state may cause failures that are far removed from the code containing the bug<br>and hence difficult to debug. A related disadvantage is that the JavaBeanspattern precludes the possibility of<br>making a class immutable (Item 17) and requires added effort on the part of the programmer to ensure thread safety.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;It is possible to reduce these disadvantages by manually “freezing” the object<br>when its construction is complete and not allowing it to be used until frozen, but<br>this variant is unwieldy and rarely used in practice. Moreover, it can cause errors<br>at runtime because the compiler cannot ensure that the programmer calls the<br>freeze method on an object before using it.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Luckily, there is a third alternative that combines the safety of the telescoping<br>constructor pattern with the readability of the JavaBeans pattern. It is a form of<br>the Builder pattern [Gamma95]. Instead of making the desired object directly,<br>the client calls a constructor (or static factory) with all of the required parameters<br>and gets a builder object. Then the client calls setter-like methods on the builder<br>object to set each optional parameter of interest. Finally, the client calls a<br>parameterless build method to generate the object, which is typically<br>immutable. The builder is typically a static member class (Item 24) of the class it<br>builds. Here’s how it looks in practice:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Builder Pattern</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NutritionFacts</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servingSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servings;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> calories;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> fat;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> sodium;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> carbohydrate;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> </span>&#123;<br>  <span class="hljs-comment">// Required parameters</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servingSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> servings;<br>  <span class="hljs-comment">// Optional parameters - initialized to default values</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> calories = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> fat = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sodium = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> carbohydrate = <span class="hljs-number">0</span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Builder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> servingSize, <span class="hljs-keyword">int</span> servings)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.servingSize = servingSize;<br>    <span class="hljs-keyword">this</span>.servings = servings;<br>  &#125; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">calories</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span><br>  </span>&#123; calories = val; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">fat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span><br>  </span>&#123; fat = val; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">sodium</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span><br>  </span>&#123; sodium = val; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">carbohydrate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span><br>  </span>&#123; carbohydrate = val; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> NutritionFacts <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> NutritionFacts(<span class="hljs-keyword">this</span>);<br>  &#125;<br>&#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">NutritionFacts</span><span class="hljs-params">(Builder builder)</span> </span>&#123;<br>    servingSize = builder.servingSize;<br>    servings = builder.servings;<br>    calories = builder.calories;<br>    fat = builder.fat;<br>    sodium = builder.sodium;<br>    carbohydrate = builder.carbohydrate;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;The NutritionFacts class is immutable, and all parameter default values<br>are in one place. The builder’s setter methods return the builder itself so that<br>invocations can be chained, resulting in a fluent API. Here’s how the client code<br>looks:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">NutritionFacts cocaCola = new NutritionFacts.Builder(<span class="hljs-number">240</span>, <span class="hljs-number">8</span>)<br>.calories(<span class="hljs-number">100</span>).sodium(<span class="hljs-number">35</span>).carbohydrate(<span class="hljs-number">27</span>).build();<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;This client code is easy to write and, more importantly, easy to read. The<br>Builder pattern simulates named optional parameters as found in Python and<br>Scala.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Validity checks were omitted for brevity. To detect invalid parameters as soon<br>as possible, check parameter validity in the builder’s constructor and methods.<br>Check invariants involving multiple parameters in the constructor invoked by the<br>build method. To ensure these invariants against attack, do the checks on<br>object fields after copying parameters from the builder (Item 50). If a check<br>fails, throw an IllegalArgumentException (Item 72) whose detail<br>message indicates which parameters are invalid (Item 75).</p><p>&nbsp;&nbsp;&nbsp;&nbsp;The Builder pattern is well suited to class hierarchies. Use a parallel<br>hierarchy of builders, each nested in the corresponding class. Abstract classes<br>have abstract builders; concrete classes have concrete builders. For example,<br>consider an abstract class at the root of a hierarchy representing various kinds of<br>pizza:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">// Builder pattern for class hierarchies</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pizza</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Topping &#123; HAM, MUSHROOM, ONION, PEPPER, SAUSAGE &#125;<br>  <span class="hljs-keyword">final</span> Set&lt;Topping&gt; toppings;<br>  <br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Builder</span>&lt;<span class="hljs-title">T</span>&gt;&gt; </span>&#123;<br>    EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">addTopping</span><span class="hljs-params">(Topping topping)</span> </span>&#123;<br>      toppings.add(Objects.requireNonNull(topping));<br>      <span class="hljs-keyword">return</span> self();<br>    &#125; <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">abstract</span> Pizza <span class="hljs-title">build</span><span class="hljs-params">()</span></span>;<br>  <br>  <span class="hljs-comment">// Subclasses must override this method to return "this"</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title">self</span><span class="hljs-params">()</span></span>;<br>  &#125;<br>  <br>  Pizza(Builder&lt;?&gt; builder) &#123;<br>  toppings = builder.toppings.clone(); <span class="hljs-comment">// See Item 50</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Note that Pizza.Builder is a generic type with a recursive type parameter<br>(Item 30). This, along with the abstract self method, allows method chaining<br>to work properly in subclasses, without the need for casts. This workaround for<br>the fact that Java lacks a self type is known as the simulated self-type idiom.<br>Here are two concrete subclasses of Pizza, one of which represents a<br>standard New-York-style pizza, the other a calzone. The former has a required<br>size parameter, while the latter lets you specify whether sauce should be inside<br>or out:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NyPizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Size &#123; SMALL, MEDIUM, LARGE &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Size size;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span>.<span class="hljs-title">Builder</span>&lt;<span class="hljs-title">Builder</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Size size;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Builder</span><span class="hljs-params">(Size size)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.size = Objects.requireNonNull(size);<br>   &#125; <br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NyPizza <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> NyPizza(<span class="hljs-keyword">this</span>);<br>    &#125; <br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Builder <span class="hljs-title">self</span><span class="hljs-params">()</span> </span>&#123; <br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <br>   &#125;<br>  &#125; <br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">NyPizza</span><span class="hljs-params">(Builder builder)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(builder);<br>    size = builder.size;<br>  &#125;<br>&#125; <br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calzone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> sauceInside;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span>.<span class="hljs-title">Builder</span>&lt;<span class="hljs-title">Builder</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> sauceInside = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// Default</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">sauceInside</span><span class="hljs-params">()</span> </span>&#123;<br>        sauceInside = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125; <br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Calzone <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Calzone(<span class="hljs-keyword">this</span>);<br>     &#125; <br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Builder <span class="hljs-title">self</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <br>    &#125;<br>  &#125; <br> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Calzone</span><span class="hljs-params">(Builder builder)</span> </span>&#123;<br>  <span class="hljs-keyword">super</span>(builder);<br>  sauceInside = builder.sauceInside;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Note that the build method in each subclass’s builder is declared to return<br>the correct subclass: the build method of NyPizza.Builder returns<br>NyPizza, while the one in Calzone.Builder returns Calzone. This<br>technique, wherein a subclass method is declared to return a subtype of the<br>return type declared in the super-class, is known as covariant return typing. It<br>allows clients to use these builders without the need for casting.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;The client code for these “hierarchical builders” is essentially identical to the<br>code for the simple NutritionFacts builder. The example client code<br>shown next assumes static imports on enum constants for brevity:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">NyPizza pizza = new NyPizza.Builder<span class="hljs-params">(SMALL)</span><br><span class="hljs-string">.addTopping</span><span class="hljs-params">(SAUSAGE)</span><span class="hljs-string">.addTopping</span><span class="hljs-params">(ONION)</span><span class="hljs-string">.build</span><span class="hljs-params">()</span>;<br>Calzone calzone = new Calzone.Builder<span class="hljs-params">()</span><br><span class="hljs-string">.addTopping</span><span class="hljs-params">(HAM)</span><span class="hljs-string">.sauceInside</span><span class="hljs-params">()</span><span class="hljs-string">.build</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;A minor advantage of builders over constructors is that builders can havemultiple<br>varargs parameters because each parameter is specified in its own<br>method. Alternatively, builders can aggregate the parameters passed into<br>multiple calls to a method into a single field, as demonstrated in the<br>addTopping method earlier.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;The Builder pattern is quite flexible. A single builder can be used repeatedly<br>to build multiple objects. The parameters of the builder can be tweaked between<br>invocations of the build method to vary the objects that are created. A builder<br>can fill in some fields automatically upon object creation, such as a serial<br>number that increases each time an object is created.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;The Builder pattern has disadvantages as well. In order to create an object,<br>you must first create its builder. While the cost of creating this builder is unlikely<br>to be noticeable in practice, it could be a problem in performance-critical<br>situations. Also, the Builder pattern is more verbose than the telescoping<br>constructor pattern, so it should be used only if there are enough parameters to<br>make it worthwhile, say four or more. But keep in mind that you may want to<br>add more parameters in the future. But if you start out with constructors or static<br>factories and switch to a builder when the class evolves to the point where the<br>number of parameters gets out of hand, the obsolete constructors or static<br>factories will stick out like a sore thumb. Therefore, it’s often better to start with<br>a builder in the first place.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;In summary, the Builder pattern is a good choice when designing classes<br>whose constructors or static factories would have more than a handful of<br>parameters, especially if many of the parameters are optional or of identical<br>type. Client code is much easier to read and write with builders than with<br>telescoping constructors, and builders are much safer than JavaBeans.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Builder 模式非常灵活。 单个 builder 可以重复使用来构建多个对象。 builder<br>的参数可以在构建方法的调用之间进行调整，以改变创建的对象。 builder 可以在创建对象时自动填充一些属性，例如每次创建对象时增加的序列号。<br>Builder 模式也有缺点。为了创建对象，首先必须创建它的 builder。虽然创建这个 builder 的成本在实践中不太可<br>能被注意到，但在性能关键的情况下可能会出现问题。而且，builder 模式比伸缩构造方法模式更冗长，因此只有在<br>有足够的参数时才值得使用它，比如四个或更多,而且最好从一开始就创建一个 builder。</p><h3 id="Tips-amp-Share"><a href="#Tips-amp-Share" class="headerlink" title="Tips&amp;Share"></a>Tips&amp;Share</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 我认为这俩个环节有时候可以合在一起</p><p><a href="https://mp.weixin.qq.com/s/uOUAmdeX88Cv0mXvBtQTnQ" target="_blank" rel="noopener">【原创】关于Spring中的参数校验的一点思考– JavaGuide </a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转载】关于Spring中的参数校验的一点思考</title>
    <link href="/2019/08/11/spring-valid-annotation/"/>
    <url>/2019/08/11/spring-valid-annotation/</url>
    
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">转载自 公众号【<span class="hljs-keyword">JavaGuide】 </span>作者：SnailClimb<br></code></pre></td></tr></table></figure><p>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。</p><p>最近工作中很多地方需要对参数做一些校验，刚开始的时候除了Controller层接受的对象我是直接通过一些 Spring 提供好的注解来实现校验比如<font color="orange">@Valid</font>、<font color="orange">@NotNull</font>  等等，在一些需要对参数做校验的其他地方我都是通过手动编程if else判断的方式来实现。后面重构代码发现有更好的方式来满足我的需求，然后花了半天时间对这部分内容做了一个简单的总结，希望可以对不了解这部分知识的朋友有帮助。</p><p>下面我会通过实例程序演示如何在 Java 程序中尤其是 Spring 程序中优雅地的进行参数验证。</p><p>基础知识和依赖</p><p>相关依赖</p><p>如果开发普通 Java 程序的的话，你需要可能需要像下面这样依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>         &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;<br>         &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;<br>         &lt;version&gt;6.0.9.Final&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>          &lt;groupId&gt;javax.el&lt;/groupId&gt;<br>          &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;<br>          &lt;version&gt;3.0.0&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>         &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;<br>         &lt;artifactId&gt;javax.el&lt;/artifactId&gt;<br>         &lt;version&gt;2.2.6&lt;/version&gt;<br>  &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>使用 Spring Boot 程序的话只需要<font color="orange">spring-boot-starter-web</font> 就够了，它的子依赖包含了我们所需要的东西。除了这个依赖，下面的演示还用到了 lombok ，所以不要忘记添加上相关依赖。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>        &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>        &lt;optional&gt;true&lt;/optional&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>        &lt;scope&gt;test&lt;/scope&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>下面这个是示例用到的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"classId 不能为空"</span>)<br>    <span class="hljs-keyword">private</span> String classId;<br><br>    <span class="hljs-meta">@Size</span>(max = <span class="hljs-number">33</span>)<br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"name 不能为空"</span>)<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Pattern</span>(regexp = <span class="hljs-string">"((^Man$|^Woman$|^UGM$))"</span>, message = <span class="hljs-string">"sex 值不在可选范围"</span>)<br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"sex 不能为空"</span>)<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-meta">@Email</span>(message = <span class="hljs-string">"email 格式不正确"</span>)<br>    <span class="hljs-meta">@NotNull</span>(message = <span class="hljs-string">"email 不能为空"</span>)<br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">正则表达式说明：<br><br>-<span class="ruby"> ^string : 匹配以 string 开头的字符串<br></span>-<span class="ruby"> string$ ：匹配以 string 结尾的字符串<br></span>-<span class="ruby"> ^string$ ：精确匹配 string 字符串<br></span>-<span class="ruby"> ((^Man$|^Woman$|^UGM$)) : 值只能在 Man,Woman,UGM 这三个值中选择</span><br></code></pre></td></tr></table></figure><p>下面这部分校验注解说明内容参考自：<a href="https://www.cnkirito.moe/spring-validation/[1]" target="_blank" rel="noopener">https://www.cnkirito.moe/spring-validation/[1]</a> ，感谢@徐靖峰[2]。</p><h3 id="JSR提供的校验注解"><a href="#JSR提供的校验注解" class="headerlink" title="JSR提供的校验注解:"></a>JSR提供的校验注解:</h3><p>•<font color="orange">@Null</font> 被注释的元素必须为 null <br><br>•<font color="orange">@NotNull</font> 被注释的元素必须不为 null <br><br>•<font color="orange">@AssertTrue</font> 被注释的元素必须为 true  <br><br>•<font color="orange">@AssertFalse</font> 被注释的元素必须为 false <br><br>•<font color="orange">@Min(value)</font> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 <br><br>•<font color="orange">@Max(value)</font> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 <br><br>•<font color="orange">@DecimalMin(value)</font> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值 <br><br>•<font color="orange">@DecimalMax(value)</font> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值 <br><br>•<font color="orange">@Size(max=, min=)</font> 被注释的元素的大小必须在指定的范围内 <br><br>•<font color="orange">@Digits (integer, fraction)</font> 被注释的元素必须是一个数字，其值必须在可接受的范围内 <br><br>•<font color="orange">@Past</font> 被注释的元素必须是一个过去的日期 <br><br>•<font color="orange">@Future</font> 被注释的元素必须是一个将来的日期 <br><br>•<font color="orange">@Pattern(regex=,flag=)</font> 被注释的元素必须符合指定的正则表达式 <br></p><h3 id="Hibernate-Validator提供的校验注解："><a href="#Hibernate-Validator提供的校验注解：" class="headerlink" title="Hibernate Validator提供的校验注解："></a>Hibernate Validator提供的校验注解：</h3><p>•<font color="orange">@NotBlank(message =)</font> 验证字符串非null，且长度必须大于0 <br><br>•<font color="orange">@Email</font> 被注释的元素必须是电子邮箱地址 <br><br>•<font color="orange">@Length(min=,max=)</font> 被注释的字符串的大小必须在指定的范围内 <br><br>•<font color="orange">@NotEmpty</font> 被注释的字符串的必须非空 <br><br>•<font color="orange">@Range(min=,max=,message=)</font> 被注释的元素必须在合适的范围内 <br></p><h1 id="验证Controller的输入"><a href="#验证Controller的输入" class="headerlink" title="验证Controller的输入"></a>验证Controller的输入</h1><h2 id="验证请求体-RequestBody"><a href="#验证请求体-RequestBody" class="headerlink" title="验证请求体(RequestBody)"></a>验证请求体(RequestBody)</h2><h3 id="Controller："><a href="#Controller：" class="headerlink" title="Controller："></a>Controller：</h3><p>我们在需要验证的参数上加上了@Valid注解，如果验证失败，它将抛出MethodArgumentNotValidException。默认情况下，Spring会将此异常转换为HTTP Status 400（错误请求）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonController</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/person"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;Person&gt; <span class="hljs-title">getPerson</span><span class="hljs-params">(@RequestBody @Valid Person person)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ExceptionHandler："><a href="#ExceptionHandler：" class="headerlink" title="ExceptionHandler："></a>ExceptionHandler：</h3><p>自定义异常处理器可以帮助我们捕获异常，并进行一些简单的处理。如果对于下面的处理异常的代码不太理解的话，可以查看这篇文章 《SpringBoot 处理异常的几种常见姿势》。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span>(assignableTypes = &#123;PersonController.class&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)<br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Map&lt;String, String&gt;&gt; handleValidationExceptions(<br>            MethodArgumentNotValidException ex) &#123;<br>        Map&lt;String, String&gt; errors = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        ex.getBindingResult().getAllErrors().forEach((error) -&gt; &#123;<br>            String fieldName = ((FieldError) error).getField();<br>            String errorMessage = error.getDefaultMessage();<br>            errors.put(fieldName, errorMessage);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errors);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过测试验证："><a href="#通过测试验证：" class="headerlink" title="通过测试验证："></a>通过测试验证：</h3><p>下面我通过 MockMvc 模拟请求 Controller 的方式来验证是否生效，当然你也可以通过 Postman 这种工具来验证。</p><p>我们试一下所有参数输入正确的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)<br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@AutoConfigureMockMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonControllerTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MockMvc mockMvc;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ObjectMapper objectMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_get_person_correctly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.setName(<span class="hljs-string">"SnailClimb"</span>);<br>        person.setSex(<span class="hljs-string">"Man"</span>);<br>        person.setClassId(<span class="hljs-string">"82938390"</span>);<br>        person.setEmail(<span class="hljs-string">"Snailclimb@qq.com"</span>);<br><br>        mockMvc.perform(post(<span class="hljs-string">"/api/person"</span>)<br>                .contentType(MediaType.APPLICATION_JSON_UTF8)<br>                .content(objectMapper.writeValueAsString(person)))<br>                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"name"</span>).value(<span class="hljs-string">"SnailClimb"</span>))<br>                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"classId"</span>).value(<span class="hljs-string">"82938390"</span>))<br>                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"sex"</span>).value(<span class="hljs-string">"Man"</span>))<br>                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"email"</span>).value(<span class="hljs-string">"Snailclimb@qq.com"</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>验证出现参数不合法的情况抛出异常并且可以正确被捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_check_person_value</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       Person person = <span class="hljs-keyword">new</span> Person();<br>       person.setSex(<span class="hljs-string">"Man22"</span>);<br>       person.setClassId(<span class="hljs-string">"82938390"</span>);<br>       person.setEmail(<span class="hljs-string">"SnailClimb"</span>);<br><br>       mockMvc.perform(post(<span class="hljs-string">"/api/person"</span>)<br>               .contentType(MediaType.APPLICATION_JSON_UTF8)<br>               .content(objectMapper.writeValueAsString(person)))<br>               .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"sex"</span>).value(<span class="hljs-string">"sex 值不在可选范围"</span>))<br>               .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"name"</span>).value(<span class="hljs-string">"name 不能为空"</span>))<br>               .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">"email"</span>).value(<span class="hljs-string">"email 格式不正确"</span>));<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="验证请求参数-Path-Variables-和-Request-Parameters"><a href="#验证请求参数-Path-Variables-和-Request-Parameters" class="headerlink" title="验证请求参数(Path Variables 和 Request Parameters)"></a>验证请求参数(Path Variables 和 Request Parameters)</h2><h3 id="Controller：-1"><a href="#Controller：-1" class="headerlink" title="Controller："></a>Controller：</h3><p>一定一定不要忘记在类上加上 Validated 注解了，这个参数可以告诉 Spring 去校验方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/api"</span>)<br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/person/&#123;id&#125;"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;Integer&gt; <span class="hljs-title">getPersonByID</span><span class="hljs-params">(@Valid @PathVariable(<span class="hljs-string">"id"</span>)</span> @<span class="hljs-title">Max</span><span class="hljs-params">(value = <span class="hljs-number">5</span>,message = <span class="hljs-string">"超过 id 的范围了"</span>)</span> Integer id) </span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/person"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title">getPersonByName</span><span class="hljs-params">(@Valid @RequestParam(<span class="hljs-string">"name"</span>)</span> @<span class="hljs-title">Size</span><span class="hljs-params">(max = <span class="hljs-number">6</span>,message = <span class="hljs-string">"超过 name 的范围了"</span>)</span> String name) </span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ExceptionHandler：-1"><a href="#ExceptionHandler：-1" class="headerlink" title="ExceptionHandler："></a>ExceptionHandler：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler</span>(ConstraintViolationException.class)<br><span class="hljs-function">ResponseEntity&lt;String&gt; <span class="hljs-title">handleConstraintViolationException</span><span class="hljs-params">(ConstraintViolationException e)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过测试验证：-1"><a href="#通过测试验证：-1" class="headerlink" title="通过测试验证："></a>通过测试验证：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_check_param_value</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>      mockMvc.perform(get(<span class="hljs-string">"/api/person/6"</span>)<br>              .contentType(MediaType.APPLICATION_JSON_UTF8))<br>              .andExpect(status().isBadRequest())<br>              .andExpect(content().string(<span class="hljs-string">"getPersonByID.id: 超过 id 的范围了"</span>));<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_check_param_value2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>      mockMvc.perform(put(<span class="hljs-string">"/api/person"</span>)<br>              .param(<span class="hljs-string">"name"</span>,<span class="hljs-string">"snailclimbsnailclimb"</span>)<br>              .contentType(MediaType.APPLICATION_JSON_UTF8))<br>              .andExpect(status().isBadRequest())<br>              .andExpect(content().string(<span class="hljs-string">"getPersonByName.name: 超过 name 的范围了"</span>));<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="验证-Service-中的方法"><a href="#验证-Service-中的方法" class="headerlink" title="验证 Service 中的方法"></a>验证 Service 中的方法</h3><p>我们还可以验证任何Spring组件的输入，而不是验证控制器级别的输入，我们可以使用@Validated和@Valid注释的组合来实现这一需求。</p><p>一定一定不要忘记在类上加上 Validated 注解了，这个参数可以告诉 Spring 去校验方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validatePerson</span><span class="hljs-params">(@Valid Person person)</span></span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过测试验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith</span>(SpringRunner.class)<br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@AutoConfigureMockMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonServiceTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PersonService service;<br><br>    <span class="hljs-meta">@Test</span>(expected = ConstraintViolationException.class)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_throw_exception_when_person_is_not_valid</span><span class="hljs-params">()</span> </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.setSex(<span class="hljs-string">"Man22"</span>);<br>        person.setClassId(<span class="hljs-string">"82938390"</span>);<br>        person.setEmail(<span class="hljs-string">"SnailClimb"</span>);<br>        service.validatePerson(person);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Validator-编程方式手动进行参数验证"><a href="#Validator-编程方式手动进行参数验证" class="headerlink" title="Validator 编程方式手动进行参数验证"></a>Validator 编程方式手动进行参数验证</h1><p>某些场景下可能会需要我们手动校验并获得校验结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check_person_manually</span><span class="hljs-params">()</span> </span>&#123;<br>    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();<br>    Validator validator = factory.getValidator();<br>    Person person = <span class="hljs-keyword">new</span> Person();<br>    person.setSex(<span class="hljs-string">"Man22"</span>);<br>    person.setClassId(<span class="hljs-string">"82938390"</span>);<br>    person.setEmail(<span class="hljs-string">"SnailClimb"</span>);<br>    Set&lt;ConstraintViolation&lt;Person&gt;&gt; violations = validator.validate(person);<br>    <span class="hljs-comment">//output:</span><br>    <span class="hljs-comment">//email 格式不正确</span><br>    <span class="hljs-comment">//name 不能为空</span><br>    <span class="hljs-comment">//sex 值不在可选范围</span><br>    <span class="hljs-keyword">for</span> (ConstraintViolation&lt;Person&gt; constraintViolation : violations) &#123;<br>        System.out.println(constraintViolation.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面我们是通过 Validator 工厂类获得的 Validator 示例，当然你也可以通过 @Autowired 直接注入的方式。但是在非 Spring Component 类中使用这种方式的话，只能通过工厂类来获得 Validator。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">@Autowired</span><br>Validator validate<br></code></pre></td></tr></table></figure><h1 id="自定义-Validator"><a href="#自定义-Validator" class="headerlink" title="自定义 Validator"></a>自定义 Validator</h1><p>如果自带的校验注解无法满足你的需求的话，你还可以自定义实现注解。比如我们的Person类多了一个 region 字段，region 字段只能是China、China-Taiwan、China-HongKong这三个中的一个。</p><p>第一步你需要创建一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target</span>(&#123;FIELD&#125;)<br><span class="hljs-meta">@Retention</span>(RUNTIME)<br><span class="hljs-meta">@Constraint</span>(validatedBy = RegionValidator.class)<br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Region &#123;<br><br>    <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> "Region 值不在可选范围内"</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? extends Payload&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步你需要实现 ConstraintValidator接口，并重写isValid 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegionValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">Region</span>, <span class="hljs-title">String</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> </span>&#123;<br>        HashSet&lt;Object&gt; regions = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        regions.add(<span class="hljs-string">"China"</span>);<br>        regions.add(<span class="hljs-string">"China-Taiwan"</span>);<br>        regions.add(<span class="hljs-string">"China-HongKong"</span>);<br>        <span class="hljs-keyword">return</span> regions.contains(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在你就可以使用这个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Region</span><br><span class="hljs-keyword">private</span> String region;<br></code></pre></td></tr></table></figure><h1 id="使用验证组"><a href="#使用验证组" class="headerlink" title="使用验证组"></a>使用验证组</h1><p>很多时候我们需要使用到验证组，这样说可能不太清楚，说简单点就是对对象操作的不同方法有不同的验证规则，示例如下。</p><p>先创建两个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AddPersonGroup</span> </span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeletePersonGroup</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以这样去使用验证组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull</span>(groups = DeletePersonGroup.class)<br><span class="hljs-meta">@Null</span>(groups = AddPersonGroup.class)<br><span class="hljs-keyword">private</span> String group;<br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validatePerson</span><span class="hljs-params">(@Valid Person person)</span> </span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br><br>    <span class="hljs-meta">@Validated</span>(AddPersonGroup.class)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validatePersonGroupForAdd</span><span class="hljs-params">(@Valid Person person)</span> </span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br><br>    <span class="hljs-meta">@Validated</span>(DeletePersonGroup.class)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validatePersonGroupForDelete</span><span class="hljs-params">(@Valid Person person)</span> </span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过测试验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>(expected = ConstraintViolationException.class)<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_check_person_with_groups</span><span class="hljs-params">()</span> </span>&#123;<br>      Person person = <span class="hljs-keyword">new</span> Person();<br>      person.setSex(<span class="hljs-string">"Man22"</span>);<br>      person.setClassId(<span class="hljs-string">"82938390"</span>);<br>      person.setEmail(<span class="hljs-string">"SnailClimb"</span>);<br>      person.setGroup(<span class="hljs-string">"group1"</span>);<br>      service.validatePersonGroupForAdd(person);<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span>(expected = ConstraintViolationException.class)<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">should_check_person_with_groups2</span><span class="hljs-params">()</span> </span>&#123;<br>      Person person = <span class="hljs-keyword">new</span> Person();<br>      person.setSex(<span class="hljs-string">"Man22"</span>);<br>      person.setClassId(<span class="hljs-string">"82938390"</span>);<br>      person.setEmail(<span class="hljs-string">"SnailClimb"</span>);<br>      service.validatePersonGroupForDelete(person);<br>  &#125;<br></code></pre></td></tr></table></figure><p>使用验证组这种方式的时候一定要小心，这是一种反模式，还会造成代码逻辑性变差。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么HashMap已经继承了AbstractMap，又实现Map？</title>
    <link href="/2019/07/02/hashmap-extends-implements/"/>
    <url>/2019/07/02/hashmap-extends-implements/</url>
    
    <content type="html"><![CDATA[<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap&lt;K</span>,<span class="hljs-title">V&gt;</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMap&lt;K</span>,<span class="hljs-title">V&gt;</span></span><br>    implements <span class="hljs-type">Map</span>&lt;<span class="hljs-type">K</span>,<span class="hljs-type">V</span>&gt;, <span class="hljs-type">Cloneable</span>, <span class="hljs-type">Serializable</span> &#123;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/07/02/hashmap-extends-implements/extends.png" srcset="/img/loading.gif" lazyload alt="StackOverflow的解释"></p><p><a href="https://stackoverflow.com/questions/2165204/why-does-linkedhashsete-extend-hashsete-and-implement-sete" target="_blank" rel="noopener">链接:摸我 </a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
